// :api-pmd: {site-url}/api/latest/mill/javalib/pmd

// The `PmdModule` enables support for analyzing sources with
// https://docs.pmd-code.org/latest/index.html[PMD].

package build

import mill.javalib.JavaModule
import mill.javalib.pmd.PmdModule

object `package` extends JavaModule with PmdModule

/** See Also: src/Foo.java */
/** See Also: ruleset.xml */

// NOTE: Mill auto-selects XML ruleset files, with name prefix "ruleset", in the module folder.
// If the search returns empty, it is repeated in the workspace folder.

// Here, we specify the
// https://docs.pmd-code.org/latest/pmd_rules_java_bestpractices.html#systemprintln[SystemPrintln]
// rule to be checked. The `pmd` command applies the rule on all sources and reports violations in
// one of the available https://docs.pmd-code.org/latest/pmd_userdocs_report_formats.html[formats].

/** Usage
> ./mill pmd                # task fails on violation
...Foo.java:4:	SystemPrintln:	Usage of System.out/err
error: ...violation(s) found

> ./mill pmd -f textcolor   # same as above with different report format
...Foo.java
    src:  Foo.java:4:4
    rule: SystemPrintln
    msg:  Usage of System.out/err
    code: System.out.println("Entering test");
Summary:
* warnings: 1
error: ...violation(s) found

> ./mill pmd --minimum-priority High  # violation is suppressed when run with higher threshold
no violations found
*/

// TIP: For multi-module projects, it is sufficient to extend the `PmdModule` in the root module if
// the same rulesets are to be applied in all modules.

// You can also run the companion `PmdModule` xref:fundamentals/modules.adoc#_external_modules[globally]
// if you prefer not to have to extend the trait in your build.

/** Usage
> ./mill mill.javalib.pmd.PmdModule/
...Foo.java:4:	SystemPrintln:	Usage of System.out/err
error: ...violation(s) found
*/

// For the full list of configuration options, please refer to the
// link:{api-pmd}/PmdModule.html[API documentation].
